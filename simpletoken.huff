// @notice - Simple ERC20 token written in Huff, a low level EVM programming language


// ================ STORAGE LOCATIONS ================ //
#define macro BALANCE_LOCATION = takes(0) returns(1) {
	0x00 // do not change!
}

#define macro OWNER_LOCATION = takes(0) returns(1) {
	0x01
}

#define macro TOTAL_SUPPLY_LOCATION = takes(0) returns(1) {
	0x02
}

#define macro ALLOWANCE_LOCATION = takes(0) returns(1) {
	0x03
}

// ================= EVENT SIGS & ADDR mask ============= //

#define macro ADDRESS_MASK = takes(1) returns(1) {
	0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff
	and
}

#define macro TRANSFER_EVENT_SIGNATURE = takes(0) returns(1) {
	0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF
}

#define macro APPROVAL_EVENT_SIGNATURE = takes(0) returns(1) {
	0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925
}


// ================= UTILS ================================== //

template <error_location>
#define macro UTILS__NOT_PAYABLE = takes(0) returns(0) {
	callvalue <error_location> jumpi
}

#define macro UTILS__ONLY_OWNER = takes(0) returns(0) {
	OWNER_LOCATION() sload caller eq is_owner jumpi
		0x00 0x00 revert
	is_owner:
}

// ================ CONSTRUCTOR ============================== //
// @dev - takes the msg caller and stores it in OWNER_LOCATION (0x01)
// caller pushes msg.sender onto the stack
// sstore - consumes first two stack items and store 2nd stack item
// (using the first as storage pointer)
#define macro ERC20 = takes(0) returns(0) {
    caller OWNER_LOCATION() sstore
}

// @dev - Handler for various ERC20 specific calls (approve, balanceOf, transfer, transferFrom etc)
// we parse function signatures by passing first 4 bytes of calldata
template <transfer, transfer_from, balance_of, allowance, approve, total_supply, mint, error_location>
#define macro ERC20__FUNCTION_SIGNATURE = takes(0) returns(0) {
	0x00 calldataload 224 shr // function signature
	dup1 0x095ea7b3 eq <approve> jumpi
	dup1 0x18160ddd eq <total_supply> jumpi
	dup1 0x23b872dd eq <transfer_from> jumpi
	dup1 0x40c10f19 eq <mint> jumpi
	dup1 0x70a08231 eq <balance_of> jumpi
	dup1 0xa9059cbb eq <transfer> jumpi
	dup1 0xdd62ed3e eq <allowance> jumpi
	UTILS__NOT_PAYABLE<error_location>()
	0x00 0x00 return
}



#define macro ERC20__TRANSFER_INIT = takes(0) returns(6) {
    0x04 calldataload ADDRESS_MASK() // load and mask
    caller                           // put msg sender onto stack
    TRANSFER_EVENT_SIGNATURE()
    0x20
    0x00
    0x24 calldataload
    // stack: [value, 0x20, 0x00, signature, from, to]
    // dup6 0x00 mstore
    // 0x40 0x00 sha3 // 0x40 is a free mem pointer

    // updating balances[to]
    // dup1 sload
    // dup3
    // MATH__ADD()
}

// @dev - increment balance
#define macro ERC20__TRANSFER_GIVE_TO = takes(6) returns(7) {
    dup6 0x00 mstore
    0x40 0x00 sha3
    dup1 sload
    dup3
    add
    dup1
    dup4
    gt
    swap2
    sstore
}

// @dev - decrement balance
template <from>
#define macro ERC20__TRANSFER_TAKE_FROM = takes(7) returns(8) {
    <from> 0x00 mstore
    0x40 0x00 sha3
    dup1 sload
    dup4 dup2 sub
    dup5 swap3
    sstore
    lt // stack: [err2, err1, val, 0x00, 0x20, signature, from, to]
}

// ERC20 transfer wrapper function (calls 3 other macros)
template <error_location>
#define macro ERC20__TRANSFER = takes(0) returns(0) {
    ERC20__TRANSFER_INIT()
    ERC20__TRANSFER_GIVE_TO()
    ERC20__TRANSFER_TAKE_FROM<caller>() // passing caller as an argument
    callvalue or or <error_location> jumpi // any non zero value triggers jump instruction
    0x00 mstore log3
    0x01 0x00 mstore
    0x20 0x00 return
}

#define macro ERC20__TRANSFER_SUB_ALLOWANCE = takes(8) returns (9) {
    // init state: [error2, error1, value, 0x00, 0x20, signature, from, to]
    dup7 0x00 mstore
    ALLOWANCE_LOCATION() 0x20 mstore
    0x40 0x00 sha3
   
    0x20 mstore
    caller 0x00 mstore
    0x40 0x00 sha3
    
    dup1 sload 
    dup5 dup2 
    sub dup6  
    swap3 sstore
    lt
}




// @dev - implements transferFrom(address from, address to, uint value)
// the only difference between this and transfer is that transfer uses msg.sender whereas
// transferFrom() uses 'address from'
#define macro ERC20__TRANSFER_FROM_INIT = takes(0) returns(6) {
    0x24 calldataload ADDRESS_MASK()
    0x04 calldataload ADDRESS_MASK()
    TRANSFER_EVENT_SIGNATURE()
    0x20
    0x00
    0x44 calldataload // third argument (value)
    // stack: [value, 0x00, 0x20, signature, from, to]
}

// @dev - implements balanceOf(address)
template <error_location>
#define macro ERC20__BALANCE_OF = takes(0) returns(0) {
    UTILS__NOT_PAYABLE<throw_error>()
    0x04 calldataload ADDRESS_MASK()
    0x00 mstore
    0x40 0x00 sha3 // get the key for `balances[owner]`
    sload // stack now has balances[owner]
    0x00 mstore
    0x20 0x00 return
}

// @dev - allowance of an account (i.e: allowances[_owner][_spender])
template <error_location>
#define macro ERC2O__ALLOWANCE = takes(0) returns(0) {
    UTILS__NOT_PAYABLE<error_location>()
    0x04 calldataload ADDRESS_MASK() // load owner to stack
    0x00 mstore // store owner at 0x00
    ALLOWANCE_LOCATION() 0x20 mstore // store allowance at 0x20
    0x40 0x00 sha3 // hash owner

    // stack: [key(allownaces(_owner))]
    // store at 0x20 and store spender (for approval) at 0x00
    0x20 mstore
    0x24 calldatload ADDRESS_MASK()
    0x00 mstore

    // hash key(allowances[_owner]) and spender to get => key of allowances[_owner][_spender]
    0x40 0x00 sha3
    // sload to get allowances value
    sload
    0x00 mstore // store it at 0x00
    0x20 0x00 return // return allowance
}

// @dev - return total supply
template <error_location>
#define macro ERC20__TOTAL_SUPPLY = takes(0) returns(0) {
    UTILS__NOT_PAYABLE<error_location>()
    TOTAL_SUPPLY_LOCATION() sload
    0x00 mstore
    0x20 0x00 return
}

template <error_location>
#define macro ERC20__APPROVE = takes(0) returns(0) {
    UTILS__NOT_PAYABLE<error_location>()
    0x04 calldataload ADDRESS_MASK()
    caller
    APPROVAL_EVENT_SIGNATURE()
    0x20
    0x00
    // state: [0x00, 0x20, signature, msg.sender, _spender]
    0x24 calldataload
    dup1
    // state: [value, value, 0x00, 0x20, signature, msg.sender, _spender]
    caller 0x00 mstore
    ALLOWANCE_LOCATION() 0x20 mstore
    0x40 0x00 sha3
    0x20 mstore
    dup7 0x00 mstore
    0x40 0x00 sha3
    // state: [key(allowances[msg.sender][_spender]), value, value, 0x00, 0x20, signature, msg.sender, _spender] 
    sstore

    // state: [value, 0x00, 0x20, signature, ownner, _spender]
    0x00 mstore
    // state: [0x00, 0x20, signature, owner, _spender]
    log3
    0x01 0x00 mstore
    0x20 0x00 return
}

// @dev -- erc20 transferFrom()
template <error_location>
#define macro ERC20__TRANSFER_FROM = takes(0) returns(0) {
    ERC20__TRANSFER_FROM_INIT()
    ERC20__TRANSFER_GIVE_TO()
    ERC20__TRANSFER_TAKE_FROM<dup6>()
    ERC20__TRANSFER_SUB_ALLOWANCE()
    // stack: [error3, error2, error1, value, 0x00, 0x20, signature, from, to]
    or or <error_location> jumpi
    // stack: [value, 0x00, 0x20, signature, from, to]
    0x00 mstore log3
    0x01 0x00 mstore
    0x20 0x00 return
}

// @dev - implements the mint() function
template <error_location>
#define macro ERC20__MINT = takes(0) returns(0) {
    UTILS__ONLY_OWNER()
    0x04 calldataload ADDRESS_MASK() // get the 'to' address and mask
    0 //from
    TRANSFER_EVENT_SIGNATURE()
    0x20
    0x00
    0x24 calldataload
    // stack: [value, 0x00, 0x20, signature, from, to]
    ERC20__TRANSFER_GIVE_TO()
    // stack: [error1, value, 0x00, 0x20, signature, from, to]
    dup2 dup1
    // stack: [value, value, 0x00, 0x20, signature, from, to]
    TOTAL_SUPPLY_LOCATION() sload add
    dup1 TOTAL_SUPPLY_LOCATION() sstore
    lt
    // stack: [error2, error1, 0x00, 0x20, signature, from, to]
    callvalue or or <error_location> jumpi
    log3
    0x01 0x00 mstore
    0x20 0x00 return
}

// @dev - Main ERC20 boilerplate / skeleton
#define macro ERC20__MAIN = takes(0) returns(0) {
    ERC20__FUNCTION_SIGNATURE<
        transfer,
        transfer_from,
        balance_of,
        allowance,
        approve,
        total_supply,
        mint,
        throw_error
    >()
    transfer:
        ERC20__TRANSFER<throw_error>()
    transfer_from:
        ERC20__TRANSFER_FROM<throw_error>()
    balance_of:
        ERC20__BALANCE_OF<throw_error>()
    allowance:
        ERC2O__ALLOWANCE<throw_error>()
    approve:
        ERC20__APPROVE<throw_error>()
    total_supply:
        ERC20__TOTAL_SUPPLY<throw_error>()
    mint:
        ERC20__MINT<throw_error>()
    throw_error:
        0x00 0x00 revert
}